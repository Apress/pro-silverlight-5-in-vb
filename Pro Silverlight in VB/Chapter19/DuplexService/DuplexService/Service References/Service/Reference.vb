'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.235
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System.Runtime.Serialization

'
'This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.60818.0
'
Namespace Service
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"),  _
     System.Runtime.Serialization.DataContractAttribute(Name:="TaskDescription", [Namespace]:="http://schemas.datacontract.org/2004/07/")>  _
    Partial Public Class TaskDescription
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private DataToProcessField As String
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property DataToProcess() As String
            Get
                Return Me.DataToProcessField
            End Get
            Set
                If (Object.ReferenceEquals(Me.DataToProcessField, value) <> true) Then
                    Me.DataToProcessField = value
                    Me.RaisePropertyChanged("DataToProcess")
                End If
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"),  _
     System.Runtime.Serialization.DataContractAttribute(Name:="TaskResult", [Namespace]:="http://schemas.datacontract.org/2004/07/")>  _
    Partial Public Class TaskResult
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private ProcessedDataField As String
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ProcessedData() As String
            Get
                Return Me.ProcessedDataField
            End Get
            Set
                If (Object.ReferenceEquals(Me.ProcessedDataField, value) <> true) Then
                    Me.ProcessedDataField = value
                    Me.RaisePropertyChanged("ProcessedData")
                End If
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.ServiceContractAttribute(ConfigurationName:="Service.IAsyncTaskService", CallbackContract:=GetType(Service.IAsyncTaskServiceCallback))>  _
    Public Interface IAsyncTaskService
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, AsyncPattern:=true, Action:="http://tempuri.org/IAsyncTaskService/SubmitTask")>  _
        Function BeginSubmitTask(ByVal task As Service.TaskDescription, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Sub EndSubmitTask(ByVal result As System.IAsyncResult)
    End Interface
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Public Interface IAsyncTaskServiceCallback
        
        <System.ServiceModel.OperationContractAttribute(IsOneWay:=true, Action:="http://tempuri.org/IAsyncTaskService/ReturnResult")>  _
        Sub ReturnResult(ByVal result As Service.TaskResult)
    End Interface
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Public Interface IAsyncTaskServiceChannel
        Inherits Service.IAsyncTaskService, System.ServiceModel.IClientChannel
    End Interface
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class AsyncTaskServiceClient
        Inherits System.ServiceModel.DuplexClientBase(Of Service.IAsyncTaskService)
        Implements Service.IAsyncTaskService
        
        Private onBeginSubmitTaskDelegate As BeginOperationDelegate
        
        Private onEndSubmitTaskDelegate As EndOperationDelegate
        
        Private onSubmitTaskCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private useGeneratedCallback As Boolean
        
        Private onBeginOpenDelegate As BeginOperationDelegate
        
        Private onEndOpenDelegate As EndOperationDelegate
        
        Private onOpenCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginCloseDelegate As BeginOperationDelegate
        
        Private onEndCloseDelegate As EndOperationDelegate
        
        Private onCloseCompletedDelegate As System.Threading.SendOrPostCallback
        
        Public Sub New(ByVal callbackInstance As System.ServiceModel.InstanceContext)
            MyBase.New(callbackInstance)
        End Sub
        
        Public Sub New(ByVal callbackInstance As System.ServiceModel.InstanceContext, ByVal endpointConfigurationName As String)
            MyBase.New(callbackInstance, endpointConfigurationName)
        End Sub
        
        Public Sub New(ByVal callbackInstance As System.ServiceModel.InstanceContext, ByVal endpointConfigurationName As String, ByVal remoteAddress As String)
            MyBase.New(callbackInstance, endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal callbackInstance As System.ServiceModel.InstanceContext, ByVal endpointConfigurationName As String, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(callbackInstance, endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal callbackInstance As System.ServiceModel.InstanceContext, ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(callbackInstance, binding, remoteAddress)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String)
            Me.New(New AsyncTaskServiceClientCallback(), endpointConfigurationName)
        End Sub
        
        Private Sub New(ByVal callbackImpl As AsyncTaskServiceClientCallback, ByVal endpointConfigurationName As String)
            Me.New(New System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName)
            useGeneratedCallback = true
            callbackImpl.Initialize(Me)
        End Sub
        
        Public Sub New(ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            Me.New(New AsyncTaskServiceClientCallback(), binding, remoteAddress)
        End Sub
        
        Private Sub New(ByVal callbackImpl As AsyncTaskServiceClientCallback, ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            Me.New(New System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress)
            useGeneratedCallback = true
            callbackImpl.Initialize(Me)
        End Sub
        
        Public Sub New()
            Me.New(New AsyncTaskServiceClientCallback())
        End Sub
        
        Private Sub New(ByVal callbackImpl As AsyncTaskServiceClientCallback)
            Me.New(New System.ServiceModel.InstanceContext(callbackImpl))
            useGeneratedCallback = true
            callbackImpl.Initialize(Me)
        End Sub
        
        Public Property CookieContainer() As System.Net.CookieContainer
            Get
                Dim httpCookieContainerManager As System.ServiceModel.Channels.IHttpCookieContainerManager = Me.InnerChannel.GetProperty(Of System.ServiceModel.Channels.IHttpCookieContainerManager)
                If (Not (httpCookieContainerManager) Is Nothing) Then
                    Return httpCookieContainerManager.CookieContainer
                Else
                    Return Nothing
                End If
            End Get
            Set
                Dim httpCookieContainerManager As System.ServiceModel.Channels.IHttpCookieContainerManager = Me.InnerChannel.GetProperty(Of System.ServiceModel.Channels.IHttpCookieContainerManager)
                If (Not (httpCookieContainerManager) Is Nothing) Then
                    httpCookieContainerManager.CookieContainer = value
                Else
                    Throw New System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC"& _ 
                            "ookieContainerBindingElement.")
                End If
            End Set
        End Property
        
        Public Event SubmitTaskCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event ReturnResultReceived As System.EventHandler(Of ReturnResultReceivedEventArgs)
        
        Public Event OpenCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        Public Event CloseCompleted As System.EventHandler(Of System.ComponentModel.AsyncCompletedEventArgs)
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function Service_IAsyncTaskService_BeginSubmitTask(ByVal task As Service.TaskDescription, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Service.IAsyncTaskService.BeginSubmitTask
            Return MyBase.Channel.BeginSubmitTask(task, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Sub Service_IAsyncTaskService_EndSubmitTask(ByVal result As System.IAsyncResult) Implements Service.IAsyncTaskService.EndSubmitTask
            MyBase.Channel.EndSubmitTask(result)
        End Sub
        
        Private Function OnBeginSubmitTask(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Me.VerifyCallbackEvents
            Dim task As Service.TaskDescription = CType(inValues(0),Service.TaskDescription)
            Return CType(Me,Service.IAsyncTaskService).BeginSubmitTask(task, callback, asyncState)
        End Function
        
        Private Function OnEndSubmitTask(ByVal result As System.IAsyncResult) As Object()
            CType(Me,Service.IAsyncTaskService).EndSubmitTask(result)
            Return Nothing
        End Function
        
        Private Sub OnSubmitTaskCompleted(ByVal state As Object)
            If (Not (Me.SubmitTaskCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent SubmitTaskCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub SubmitTaskAsync(ByVal task As Service.TaskDescription)
            Me.SubmitTaskAsync(task, Nothing)
        End Sub
        
        Public Overloads Sub SubmitTaskAsync(ByVal task As Service.TaskDescription, ByVal userState As Object)
            If (Me.onBeginSubmitTaskDelegate Is Nothing) Then
                Me.onBeginSubmitTaskDelegate = AddressOf Me.OnBeginSubmitTask
            End If
            If (Me.onEndSubmitTaskDelegate Is Nothing) Then
                Me.onEndSubmitTaskDelegate = AddressOf Me.OnEndSubmitTask
            End If
            If (Me.onSubmitTaskCompletedDelegate Is Nothing) Then
                Me.onSubmitTaskCompletedDelegate = AddressOf Me.OnSubmitTaskCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginSubmitTaskDelegate, New Object() {task}, Me.onEndSubmitTaskDelegate, Me.onSubmitTaskCompletedDelegate, userState)
        End Sub
        
        Private Sub OnReturnResultReceived(ByVal state As Object)
            If (Not (Me.ReturnResultReceivedEvent) Is Nothing) Then
                Dim results() As Object = CType(state,Object())
                RaiseEvent ReturnResultReceived(Me, New ReturnResultReceivedEventArgs(results, Nothing, false, Nothing))
            End If
        End Sub
        
        Private Sub VerifyCallbackEvents()
            If ((Me.useGeneratedCallback <> true)  _
                        AndAlso (Not (Me.ReturnResultReceivedEvent) Is Nothing)) Then
                Throw New System.InvalidOperationException("Callback events cannot be used when the callback InstanceContext is specified. Pl"& _ 
                        "ease choose between specifying the callback InstanceContext or subscribing to th"& _ 
                        "e callback events.")
            End If
        End Sub
        
        Private Function OnBeginOpen(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Me.VerifyCallbackEvents
            Return CType(Me,System.ServiceModel.ICommunicationObject).BeginOpen(callback, asyncState)
        End Function
        
        Private Function OnEndOpen(ByVal result As System.IAsyncResult) As Object()
            CType(Me,System.ServiceModel.ICommunicationObject).EndOpen(result)
            Return Nothing
        End Function
        
        Private Sub OnOpenCompleted(ByVal state As Object)
            If (Not (Me.OpenCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent OpenCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.[Error], e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub OpenAsync()
            Me.OpenAsync(Nothing)
        End Sub
        
        Public Overloads Sub OpenAsync(ByVal userState As Object)
            If (Me.onBeginOpenDelegate Is Nothing) Then
                Me.onBeginOpenDelegate = AddressOf Me.OnBeginOpen
            End If
            If (Me.onEndOpenDelegate Is Nothing) Then
                Me.onEndOpenDelegate = AddressOf Me.OnEndOpen
            End If
            If (Me.onOpenCompletedDelegate Is Nothing) Then
                Me.onOpenCompletedDelegate = AddressOf Me.OnOpenCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginOpenDelegate, Nothing, Me.onEndOpenDelegate, Me.onOpenCompletedDelegate, userState)
        End Sub
        
        Private Function OnBeginClose(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return CType(Me,System.ServiceModel.ICommunicationObject).BeginClose(callback, asyncState)
        End Function
        
        Private Function OnEndClose(ByVal result As System.IAsyncResult) As Object()
            CType(Me,System.ServiceModel.ICommunicationObject).EndClose(result)
            Return Nothing
        End Function
        
        Private Sub OnCloseCompleted(ByVal state As Object)
            If (Not (Me.CloseCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent CloseCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(e.[Error], e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub CloseAsync()
            Me.CloseAsync(Nothing)
        End Sub
        
        Public Overloads Sub CloseAsync(ByVal userState As Object)
            If (Me.onBeginCloseDelegate Is Nothing) Then
                Me.onBeginCloseDelegate = AddressOf Me.OnBeginClose
            End If
            If (Me.onEndCloseDelegate Is Nothing) Then
                Me.onEndCloseDelegate = AddressOf Me.OnEndClose
            End If
            If (Me.onCloseCompletedDelegate Is Nothing) Then
                Me.onCloseCompletedDelegate = AddressOf Me.OnCloseCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginCloseDelegate, Nothing, Me.onEndCloseDelegate, Me.onCloseCompletedDelegate, userState)
        End Sub
        
        Protected Overrides Function CreateChannel() As Service.IAsyncTaskService
            Return New AsyncTaskServiceClientChannel(Me)
        End Function
        
        Private Class AsyncTaskServiceClientCallback
            Inherits Object
            Implements IAsyncTaskServiceCallback
            
            Private proxy As AsyncTaskServiceClient
            
            Public Sub Initialize(ByVal proxy As AsyncTaskServiceClient)
                Me.proxy = proxy
            End Sub
            
            Public Sub ReturnResult(ByVal result As Service.TaskResult) Implements IAsyncTaskServiceCallback.ReturnResult
                Me.proxy.OnReturnResultReceived(New Object() {result})
            End Sub
        End Class
        
        Private Class AsyncTaskServiceClientChannel
            Inherits ChannelBase(Of Service.IAsyncTaskService)
            Implements Service.IAsyncTaskService
            
            Public Sub New(ByVal client As System.ServiceModel.DuplexClientBase(Of Service.IAsyncTaskService))
                MyBase.New(client)
            End Sub
            
            Public Function BeginSubmitTask(ByVal task As Service.TaskDescription, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements Service.IAsyncTaskService.BeginSubmitTask
                Dim _args((1) - 1) As Object
                _args(0) = task
                Dim _result As System.IAsyncResult = MyBase.BeginInvoke("SubmitTask", _args, callback, asyncState)
                Return _result
            End Function
            
            Public Sub EndSubmitTask(ByVal result As System.IAsyncResult) Implements Service.IAsyncTaskService.EndSubmitTask
                Dim _args((0) - 1) As Object
                MyBase.EndInvoke("SubmitTask", _args, result)
            End Sub
        End Class
    End Class
    
    Public Class ReturnResultReceivedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property result() As Service.TaskResult
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Service.TaskResult)
            End Get
        End Property
    End Class
End Namespace
